package routines;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.StringReader;

import javax.xml.namespace.QName;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.soap.MessageFactory;
import javax.xml.soap.SOAPBody;
import javax.xml.soap.SOAPElement;
import javax.xml.soap.SOAPEnvelope;
import javax.xml.soap.SOAPException;
import javax.xml.soap.SOAPHeader;
import javax.xml.soap.SOAPMessage;
import javax.xml.soap.SOAPPart;

import org.dom4j.Document;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;


public class SoapHeaderHandler {

	public static String createSoapMessage(org.dom4j.Document document, String username, String password){
		String returnVal = "";
		
		MessageFactory messageFactory;
		
		try {
			messageFactory = MessageFactory.newInstance();
			
		SOAPMessage soapMessage = messageFactory.createMessage();

		// Retrieve different parts
		//SOAPPart soapPart = soapMessage.getSOAPPart();
		SOAPEnvelope soapEnvelope = soapMessage.getSOAPPart().getEnvelope();

		// Two ways to extract headers
		//SOAPHeader soapHeader = soapEnvelope.getHeader();
		//soapHeader = soapMessage.getSOAPHeader();

		// Two ways to extract body
		SOAPBody soapBody = soapEnvelope.getBody();
		soapBody = soapMessage.getSOAPBody();
		soapEnvelope.getHeader().detachNode();
	    SOAPHeader soapHeader = soapEnvelope.addHeader();

        SOAPElement security =
                soapHeader.addChildElement("Security", "wsse", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd");



        SOAPElement usernameToken =
                security.addChildElement("UsernameToken", "wsse");
        usernameToken.addAttribute(new QName("xmlns:wsu"), "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd");

        SOAPElement soapUsername =
                usernameToken.addChildElement("Username", "wsse");
        soapUsername.addTextNode(username);

        SOAPElement soapPassword =
                usernameToken.addChildElement("Password", "wsse");
        soapPassword.setAttribute("Type", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText");
       soapPassword.addTextNode(password);

       
       
       
      // SOAPElement security1 =
             //  soapHeader.addChildElement("Security", "wsse", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd");



     /*  SOAPElement usernameToken1 =
               security.addChildElement("UsernameToken", "wsse");
       usernameToken1.addAttribute(new QName("xmlns:wsu"), "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd");

       SOAPElement soapUsername1 =
               usernameToken1.addChildElement("Username", "wsse");
       soapUsername1.addTextNode(username);

       SOAPElement soapPassword1 =
               usernameToken1.addChildElement("Password", "wsse");
       soapPassword1.setAttribute("Type", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText");
      soapPassword1.addTextNode(password);
*/
       
       
       
       
       DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
       factory.setNamespaceAware(true);
       DocumentBuilder builder = factory.newDocumentBuilder();
       org.w3c.dom.Document w3cDoc = builder.parse(new InputSource(new StringReader(document.asXML())));
       
       soapBody.addDocument(w3cDoc);
       
        //Print out the outbound SOAP message to System.out
        
       ByteArrayOutputStream baos = new ByteArrayOutputStream();
       soapMessage.writeTo(baos);
       
       returnVal = baos.toString("UTF-8");
       //System.out.println(returnVal);
		} catch (SOAPException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SAXException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ParserConfigurationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return returnVal;
	}
	

}