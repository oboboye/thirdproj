package routines;

import java.util.Random;

public class DVSAUtils {

	static final String NUMERIC = "2346789";
	static final String LCASE = "abcdefghijkmnpqrstuvwxyz";
	static final String UCASE = "BCDFGHJKMQRTVWXY";
	static final String ALL_CHARS = NUMERIC + LCASE + UCASE;
	static Random rnd = new Random();
	
	public static String createOneTimeOnlyPassword(int len) {
		
		StringBuilder sb = new StringBuilder(len);
		for(int i = 0; i < len - 6; i++){ 
			sb.append(ALL_CHARS.charAt(rnd.nextInt(ALL_CHARS.length())));
		}
		
		// Need to ensure at least two upper case, lower case and numeric
		sb.insert(rnd.nextInt(sb.length()), NUMERIC.charAt(rnd.nextInt(NUMERIC.length())));
		sb.insert(rnd.nextInt(sb.length()), NUMERIC.charAt(rnd.nextInt(NUMERIC.length())));
		sb.insert(rnd.nextInt(sb.length()), LCASE.charAt(rnd.nextInt(LCASE.length())));
		sb.insert(rnd.nextInt(sb.length()), LCASE.charAt(rnd.nextInt(LCASE.length())));
		sb.insert(rnd.nextInt(sb.length()), UCASE.charAt(rnd.nextInt(UCASE.length())));
		sb.insert(rnd.nextInt(sb.length()), UCASE.charAt(rnd.nextInt(UCASE.length())));
		
		return sb.toString();
	}
	
	
	/*
	 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
	 * it must be before the "{talendTypes}" key.
	 * 
	 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
	 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
	 * Short
	 * 
	 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
	 * 
	 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
	 * 
	 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
	 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
	 * added. you can have many parameters for the Function.
	 * 
	 * 5. {example} gives a example for the Function. it is optional.
	 */	    

	
    /**
     * mot1LegacyIdConcat: returns a MOT1_LEGACY_ID style string - concatenation of all strings passed to this method
     * 
     * {talendTypes} String
     * 
     * {Category} DvsaUtilsProposed
     * 
     * {param} string("world") input: an undefined number of strings will be concatenated using connecting string (" : "); LIMITED to 80 chars in length
     * 
     * {example} mot1LegacyIdConcat("to", "be", "or", "not", "to", "be", 1234, "and", 34.78 ) # to : be : or : not : to : be  : 1234 : and : 34.78
     */

	public static String mot1LegacyIdConcat( Object... args ) throws IllegalArgumentException{

		int maxLength = 80;
		
		int j = 0;
		int totalArgsCnt = args.length;
		String rtn = "";
		String concatStr = " : ";
		String str = "";
		
		for (Object obj : args) {
			
			j++;
			
			try{
				str = String.valueOf( obj );
			}catch(Exception e){
				str = null;
				new IllegalArgumentException( "it is not possible to convert objet into a valid String (position: " + j + " of " + totalArgsCnt );
			}
			
			
			if (!str.isEmpty() && str.trim().length() > 0) {

				if (rtn.length() == 0) {
					rtn = str.trim();
				} else {
					rtn = rtn + concatStr + str.trim();
				}
			}
		}

		if (rtn.length() > maxLength) {
			throw new IllegalArgumentException("too long string to be used: please check your input: max length of result is limited to " + maxLength);
		} else {
			return rtn;
		}
	}


	
}
