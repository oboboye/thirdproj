package routines;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class ShipmentUtils {

    /**
     * getBranchCode: returns the Branch Code to use for the Universal Ship.
     * 
     * AIR: If discharge port code = GBMAN then show 'MAN, if GBLGW then show 'LGW', if other then show 'LHR'
     * SEA: Look to controlling branch on consignee organisation, if blank default to 'TIS'
     * ROA: If the first two characters of the load port = PT then show 'SIT', if MA then show 'MAN' if other then show 'TIO'
     * RAI: If the first two characters of the load port = PT then show 'SIT', if MA then show 'MAN' if other then show 'TIO'
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} string("AIR") mode: The string need to be printed.
     * {param} string("GBMAN") dischargePort: The string need to be printed.
     * {param} string("MAN") controllingBranch: The string need to be printed.
     * {param} string("GBMAN") loadPort: The string need to be printed.
     * 
     * {example} getBranchCode("ABC123", "AIR", "GBMAN", "MAN", "GBMAN") # MAN.
     */
    public static String getBranchCode(String mode, String dischargePort, String controllingBranch, String loadPort ) {
        
    	String returnVal = mode;
    	
    	if(mode!=null){
        	if(mode.compareToIgnoreCase("AIR")==0){
        		if(dischargePort!=null && dischargePort.trim().compareToIgnoreCase("")!=0){
        			if(dischargePort.trim().compareToIgnoreCase("GBMAN")==0){
        				returnVal = "MAN";
        			}else if(dischargePort.trim().compareToIgnoreCase("GBLGW")==0){
        				returnVal = "LGW";
        			}else{
        				returnVal = "LHR";
        			}
        		}else{
        			returnVal = "LHR";
        		}
        		        		
        	}else if(mode.compareToIgnoreCase("SEA")==0){
        		if(controllingBranch!=null && controllingBranch.trim().compareToIgnoreCase("")!=0){
        			returnVal = controllingBranch;
        		}else{
        			returnVal = "TIS";
        		}
        		
        		
        	}else if(mode.compareToIgnoreCase("ROA")==0){
        		if(loadPort!=null && loadPort.trim().compareToIgnoreCase("")!=0 && loadPort.length()>=2){
        			if(loadPort.substring(0, 2).compareToIgnoreCase("PT")==0){
        				returnVal = "SIT";
        			}else if(loadPort.substring(0, 2).compareToIgnoreCase("MA")==0){
        				returnVal = "MAN";
        			}else{
        				returnVal = "TIO";
        			}
        		}else{
        			returnVal = "TIO";
        		}
        		
        		
        	}else if(mode.compareToIgnoreCase("RAI")==0){
        		if(loadPort!=null && loadPort.trim().compareToIgnoreCase("")!=0 && loadPort.length()>=2){
        			if(loadPort.substring(0, 2).compareToIgnoreCase("PT")==0){
        				returnVal = "SIT";
        			}else if(loadPort.substring(0, 2).compareToIgnoreCase("MA")==0){
        				returnVal = "MAN";
        			}else{
        				returnVal = "TIO";
        			}
        		}else{
        			returnVal = "TIO";
        		}

        	}
        }
    	
    	//System.out.println(" Mode= "+mode+ " DischargePort = "+ dischargePort+ " ControllingBranch = "+controllingBranch+ " LoadPort = "+loadPort+ " Return = "+ returnVal); 
    	
    	return returnVal;
    }
    
}
