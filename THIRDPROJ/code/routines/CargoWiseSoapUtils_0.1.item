package routines;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.util.Base64;
import java.util.zip.GZIPInputStream;
import java.util.zip.GZIPOutputStream;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class CargoWiseSoapUtils {

    /**
     * helloExample: not return value, only print "hello" + message.
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} string("world") input: The string need to be printed.
     * 
     * {example} helloExemple("world") # hello world !.
     */
	
	public static String compress(String data) {
		String returnVal = "";
		ByteArrayOutputStream obj = new ByteArrayOutputStream();
		
		try {
			GZIPOutputStream gzip = new GZIPOutputStream(obj);
			gzip.write(data.getBytes("iso-8859-1"));//"iso-8859-1"
			gzip.close();
			byte[] base64 = Base64.getEncoder().encode(obj.toByteArray());
		
			returnVal = new String(base64, "iso-8859-1");
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return returnVal;
	}
	
	
	public static String decompress(String data) {
		String returnVal = "";
		
		try {
			//GZIPOutputStream gzip = new GZIPOutputStream(obj);
			//gzip.write(data.getBytes("iso-8859-1"));//"iso-8859-1"
			//gzip.close();
			byte[] base64 = Base64.getDecoder().decode(data.getBytes("iso-8859-1"));
			ByteArrayInputStream obj = new ByteArrayInputStream(base64);
			
			
			GZIPInputStream gzip = new GZIPInputStream(obj);
		
			InputStreamReader isr = new InputStreamReader(gzip);
			BufferedReader br = new BufferedReader(isr);
			
			String read = "";
			
			while((read = br.readLine())!=null){
				returnVal = returnVal + read;
			}
			
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return returnVal;
	}
	
	
}
